var N = null;var searchIndex = {};
searchIndex["nafi_ast"]={"doc":"Abstract Syntax Tree for the Nafi programming language.","items":[[3,"Span","nafi_ast","A span of source code.",N,N],[0,"containers","","Containers (for lack of a better module for them) are the \"branching points\" of the grammar.",N,N],[4,"Expression","nafi_ast::containers","The expression is the basic unit of computation.",N,N],[13,"FunctionExpression","","",0,N],[13,"FunctionCall","","",0,N],[13,"Identifier","","",0,N],[13,"IntegerLiteral","","",0,N],[4,"Statement","","A statement is the basic unit of procedural work.",N,N],[13,"Expression","","",1,N],[13,"FunctionDeclaration","","",1,N],[0,"functions","nafi_ast","Functions are units of behavior. They take input, do some work, and produce output.",N,N],[3,"FunctionExpression","nafi_ast::functions","A function expression is a brace-delimited block of code representing a callable function.",N,N],[3,"FunctionExpressionArgument","","Function Expression arguments are the bindings for inputs to the function.",N,N],[3,"FunctionCall","","A Function Call is an invocation of a function, passing arguments to produce work and output.",N,N],[3,"FunctionCallArgument","","Function Call Arguments bind a function argument to some value expression.",N,N],[3,"FunctionDeclaration","","A Function Declaration creates a new argument-overloadable function binding.",N,N],[3,"FunctionDeclarationArgument","","Function Declaration Arguments are the types and optional labels used to call the function.",N,N],[0,"paths","nafi_ast","Paths are used to uniquely refer to one type or place in the program.",N,N],[3,"Path","nafi_ast::paths","A Path is a sequence of `::`-delimited segments referring to a type or data place.",N,N],[3,"PathSegment","","A Path Segment uniquely refers to a type, data place, or module. It takes arguments for parameterized types and modules.",N,N],[0,"terminals","nafi_ast","The terminal nodes of the Nafi grammar.",N,N],[3,"Identifier","nafi_ast::terminals","A name referring to some place that information can be stored.",N,N],[3,"IntegerLiteral","","An integer in the source code.",N,N],[11,"from_source","nafi_ast","Create a span that slices into the source string.",2,N],[11,"from_slice","","Create a span of a slice given the offset from the beginning of the source.",2,[[["str"],["u32"]],["self"]]],[11,"as_str","","Get the slice of source that this span covers.",2,[[["self"]],["str"]]],[11,"start_byte","","The byte offset of the beginning of this span.",2,[[["self"]],["u32"]]],[11,"start_row","","The one-indexed row that this span starts on.",2,[[["self"]],["u32"]]],[11,"start_col","","The one-indexed column that this span starts on.",2,[[["self"]],["u32"]]],[11,"end_byte","","The byte offset of the end of this span.",2,[[["self"]],["u32"]]],[11,"end_row","","The one-indexed row that this span starts on.",2,[[["self"]],["u32"]]],[11,"end_col","","The one-indexed column that this span starts on.",2,[[["self"]],["u32"]]],[8,"Spanned","","An object that represents some span of source.",N,N],[10,"span","","Get the span that this covers.",3,[[["self"]],["span"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","nafi_ast::containers","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","nafi_ast::functions","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","nafi_ast::paths","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","nafi_ast::terminals","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"span","nafi_ast::containers","",0,[[["self"]],["span"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"span","nafi_ast::functions","",4,[[["self"]],["span"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"span","nafi_ast::paths","",10,[[["self"]],["span"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"span","nafi_ast::terminals","",12,[[["self"]],["span"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"eq","nafi_ast::containers","",0,[[["self"],["expression"]],["bool"]]],[11,"ne","","",0,[[["self"],["expression"]],["bool"]]],[11,"eq","","",1,[[["self"],["statement"]],["bool"]]],[11,"ne","","",1,[[["self"],["statement"]],["bool"]]],[11,"eq","nafi_ast::functions","",4,[[["self"],["functionexpression"]],["bool"]]],[11,"ne","","",4,[[["self"],["functionexpression"]],["bool"]]],[11,"eq","","",5,[[["self"],["functionexpressionargument"]],["bool"]]],[11,"ne","","",5,[[["self"],["functionexpressionargument"]],["bool"]]],[11,"eq","","",6,[[["self"],["functioncall"]],["bool"]]],[11,"ne","","",6,[[["self"],["functioncall"]],["bool"]]],[11,"eq","","",7,[[["self"],["functioncallargument"]],["bool"]]],[11,"ne","","",7,[[["self"],["functioncallargument"]],["bool"]]],[11,"eq","","",8,[[["self"],["functiondeclaration"]],["bool"]]],[11,"ne","","",8,[[["self"],["functiondeclaration"]],["bool"]]],[11,"eq","","",9,[[["self"],["functiondeclarationargument"]],["bool"]]],[11,"ne","","",9,[[["self"],["functiondeclarationargument"]],["bool"]]],[11,"eq","nafi_ast::paths","",10,[[["self"],["path"]],["bool"]]],[11,"ne","","",10,[[["self"],["path"]],["bool"]]],[11,"eq","","",11,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",11,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","nafi_ast::terminals","",12,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",12,[[["self"],["identifier"]],["bool"]]],[11,"eq","","",13,[[["self"],["integerliteral"]],["bool"]]],[11,"ne","","",13,[[["self"],["integerliteral"]],["bool"]]],[11,"eq","nafi_ast","",2,[[["self"],["span"]],["bool"]]],[11,"ne","","",2,[[["self"],["span"]],["bool"]]],[11,"from","","",2,[[["span"]],["self"]]],[11,"clone","nafi_ast::containers","",0,[[["self"]],["expression"]]],[11,"clone","","",1,[[["self"]],["statement"]]],[11,"clone","nafi_ast::functions","",4,[[["self"]],["functionexpression"]]],[11,"clone","","",5,[[["self"]],["functionexpressionargument"]]],[11,"clone","","",6,[[["self"]],["functioncall"]]],[11,"clone","","",7,[[["self"]],["functioncallargument"]]],[11,"clone","","",8,[[["self"]],["functiondeclaration"]]],[11,"clone","","",9,[[["self"]],["functiondeclarationargument"]]],[11,"clone","nafi_ast::paths","",10,[[["self"]],["path"]]],[11,"clone","","",11,[[["self"]],["pathsegment"]]],[11,"clone","nafi_ast::terminals","",12,[[["self"]],["identifier"]]],[11,"clone","","",13,[[["self"]],["integerliteral"]]],[11,"clone","nafi_ast","",2,[[["self"]],["span"]]],[11,"hash","","",2,N],[11,"fmt","nafi_ast::containers","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","nafi_ast::functions","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","nafi_ast::paths","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","nafi_ast::terminals","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","nafi_ast","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","nafi_ast::containers","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_ast::functions","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_ast::paths","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_ast::terminals","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_ast","",2,[[["self"],["s"]],["result"]]],[11,"from_pest","nafi_ast::containers","",0,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",1,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","nafi_ast::functions","",4,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",5,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",6,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",7,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",8,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",9,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","nafi_ast::paths","",10,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",11,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","nafi_ast::terminals","",12,[[["pairs"]],["result",["conversionerror"]]]],[11,"from_pest","","",13,[[["pairs"]],["result",["conversionerror"]]]]],"paths":[[4,"Expression"],[4,"Statement"],[3,"Span"],[8,"Spanned"],[3,"FunctionExpression"],[3,"FunctionExpressionArgument"],[3,"FunctionCall"],[3,"FunctionCallArgument"],[3,"FunctionDeclaration"],[3,"FunctionDeclarationArgument"],[3,"Path"],[3,"PathSegment"],[3,"Identifier"],[3,"IntegerLiteral"]]};
searchIndex["nafi_parser"]={"doc":"","items":[[0,"containers","nafi_parser::ast","Containers (for lack of a better module for them) are the \"branching points\" of the grammar.",N,N],[4,"Expression","nafi_parser::ast::containers","The expression is the basic unit of computation.",N,N],[13,"FunctionExpression","","",0,N],[13,"FunctionCall","","",0,N],[13,"Identifier","","",0,N],[13,"IntegerLiteral","","",0,N],[4,"Statement","","A statement is the basic unit of procedural work.",N,N],[13,"Expression","","",1,N],[13,"FunctionDeclaration","","",1,N],[0,"functions","nafi_parser::ast","Functions are units of behavior. They take input, do some work, and produce output.",N,N],[3,"FunctionExpression","nafi_parser::ast::functions","A function expression is a brace-delimited block of code representing a callable function.",N,N],[3,"FunctionExpressionArgument","","Function Expression arguments are the bindings for inputs to the function.",N,N],[3,"FunctionCall","","A Function Call is an invocation of a function, passing arguments to produce work and output.",N,N],[3,"FunctionCallArgument","","Function Call Arguments bind a function argument to some value expression.",N,N],[3,"FunctionDeclaration","","A Function Declaration creates a new argument-overloadable function binding.",N,N],[3,"FunctionDeclarationArgument","","Function Declaration Arguments are the types and optional labels used to call the function.",N,N],[0,"paths","nafi_parser::ast","Paths are used to uniquely refer to one type or place in the program.",N,N],[3,"Path","nafi_parser::ast::paths","A Path is a sequence of `::`-delimited segments referring to a type or data place.",N,N],[3,"PathSegment","","A Path Segment uniquely refers to a type, data place, or module. It takes arguments for parameterized types and modules.",N,N],[0,"terminals","nafi_parser::ast","The terminal nodes of the Nafi grammar.",N,N],[3,"Identifier","nafi_parser::ast::terminals","A name referring to some place that information can be stored.",N,N],[3,"IntegerLiteral","","An integer in the source code.",N,N],[8,"Spanned","nafi_parser::ast","An object that represents some span of source.",N,N],[10,"span","","Get the span that this covers.",2,[[["self"]],["span"]]],[3,"Span","","A span of source code.",N,N],[5,"parse","nafi_parser","",N,[[["str"]],["result",["functionexpression","box"]]]],[11,"into","nafi_parser::ast::containers","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","nafi_parser::ast::functions","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","nafi_parser::ast::paths","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","nafi_parser::ast::terminals","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","nafi_parser::ast","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"eq","nafi_parser::ast::paths","",9,[[["self"],["path"]],["bool"]]],[11,"ne","","",9,[[["self"],["path"]],["bool"]]],[11,"eq","nafi_parser::ast::functions","",3,[[["self"],["functionexpression"]],["bool"]]],[11,"ne","","",3,[[["self"],["functionexpression"]],["bool"]]],[11,"eq","nafi_parser::ast","",13,[[["self"],["span"]],["bool"]]],[11,"ne","","",13,[[["self"],["span"]],["bool"]]],[11,"eq","nafi_parser::ast::terminals","",11,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",11,[[["self"],["identifier"]],["bool"]]],[11,"eq","nafi_parser::ast::paths","",10,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",10,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","nafi_parser::ast::functions","",7,[[["self"],["functiondeclaration"]],["bool"]]],[11,"ne","","",7,[[["self"],["functiondeclaration"]],["bool"]]],[11,"eq","","",6,[[["self"],["functioncallargument"]],["bool"]]],[11,"ne","","",6,[[["self"],["functioncallargument"]],["bool"]]],[11,"eq","nafi_parser::ast::containers","",0,[[["self"],["expression"]],["bool"]]],[11,"ne","","",0,[[["self"],["expression"]],["bool"]]],[11,"eq","nafi_parser::ast::terminals","",12,[[["self"],["integerliteral"]],["bool"]]],[11,"ne","","",12,[[["self"],["integerliteral"]],["bool"]]],[11,"eq","nafi_parser::ast::containers","",1,[[["self"],["statement"]],["bool"]]],[11,"ne","","",1,[[["self"],["statement"]],["bool"]]],[11,"eq","nafi_parser::ast::functions","",8,[[["self"],["functiondeclarationargument"]],["bool"]]],[11,"ne","","",8,[[["self"],["functiondeclarationargument"]],["bool"]]],[11,"eq","","",5,[[["self"],["functioncall"]],["bool"]]],[11,"ne","","",5,[[["self"],["functioncall"]],["bool"]]],[11,"eq","","",4,[[["self"],["functionexpressionargument"]],["bool"]]],[11,"ne","","",4,[[["self"],["functionexpressionargument"]],["bool"]]],[11,"fmt","nafi_parser::ast::paths","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::containers","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::functions","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::terminals","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::functions","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::paths","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::functions","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::terminals","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::functions","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::containers","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nafi_parser::ast::functions","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"span","nafi_parser::ast::paths","",10,[[["self"]],["span"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::terminals","",11,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::functions","",6,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::containers","",0,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::functions","",4,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::containers","",1,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::functions","",5,[[["self"]],["span"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"span","nafi_parser::ast::terminals","",12,[[["self"]],["span"]]],[11,"from","nafi_parser::ast","",13,[[["span"]],["span"]]],[11,"serialize","nafi_parser::ast::functions","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::paths","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::containers","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::functions","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast","",13,[[["self"],["s"]],["result"]]],[11,"serialize","nafi_parser::ast::terminals","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::containers","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::terminals","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::paths","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","nafi_parser::ast::functions","",3,[[["self"],["__s"]],["result"]]],[11,"hash","nafi_parser::ast","",13,N],[11,"from_pest","nafi_parser::ast::terminals","",11,[[["pairs"]],["result",["identifier","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::functions","",5,[[["pairs"]],["result",["functioncall","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::terminals","",12,[[["pairs"]],["result",["integerliteral","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::containers","",1,[[["pairs"]],["result",["statement","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::paths","",10,[[["pairs"]],["result",["pathsegment","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::functions","",8,[[["pairs"]],["result",["functiondeclarationargument","conversionerror"]]]],[11,"from_pest","","",4,[[["pairs"]],["result",["functionexpressionargument","conversionerror"]]]],[11,"from_pest","","",3,[[["pairs"]],["result",["functionexpression","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::paths","",9,[[["pairs"]],["result",["path","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::functions","",7,[[["pairs"]],["result",["functiondeclaration","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::containers","",0,[[["pairs"]],["result",["expression","conversionerror"]]]],[11,"from_pest","nafi_parser::ast::functions","",6,[[["pairs"]],["result",["functioncallargument","conversionerror"]]]],[11,"clone","","",8,[[["self"]],["functiondeclarationargument"]]],[11,"clone","nafi_parser::ast","",13,[[["self"]],["span"]]],[11,"clone","nafi_parser::ast::paths","",10,[[["self"]],["pathsegment"]]],[11,"clone","nafi_parser::ast::containers","",0,[[["self"]],["expression"]]],[11,"clone","nafi_parser::ast::functions","",6,[[["self"]],["functioncallargument"]]],[11,"clone","","",3,[[["self"]],["functionexpression"]]],[11,"clone","","",7,[[["self"]],["functiondeclaration"]]],[11,"clone","","",5,[[["self"]],["functioncall"]]],[11,"clone","nafi_parser::ast::terminals","",12,[[["self"]],["integerliteral"]]],[11,"clone","nafi_parser::ast::paths","",9,[[["self"]],["path"]]],[11,"clone","nafi_parser::ast::functions","",4,[[["self"]],["functionexpressionargument"]]],[11,"clone","nafi_parser::ast::terminals","",11,[[["self"]],["identifier"]]],[11,"clone","nafi_parser::ast::containers","",1,[[["self"]],["statement"]]],[11,"from_source","nafi_parser::ast","Create a span that slices into the source string.",13,[[["str"],["impl rangebounds<u32>"]],["span"]]],[11,"from_slice","","Create a span of a slice given the offset from the beginning of the source.",13,[[["str"],["u32"]],["span"]]],[11,"as_str","","Get the slice of source that this span covers.",13,[[["self"]],["str"]]],[11,"start_byte","","The byte offset of the beginning of this span.",13,[[["self"]],["u32"]]],[11,"start_row","","The one-indexed row that this span starts on.",13,[[["self"]],["u32"]]],[11,"start_col","","The one-indexed column that this span starts on.",13,[[["self"]],["u32"]]],[11,"end_byte","","The byte offset of the end of this span.",13,[[["self"]],["u32"]]],[11,"end_row","","The one-indexed row that this span starts on.",13,[[["self"]],["u32"]]],[11,"end_col","","The one-indexed column that this span starts on.",13,[[["self"]],["u32"]]]],"paths":[[4,"Expression"],[4,"Statement"],[8,"Spanned"],[3,"FunctionExpression"],[3,"FunctionExpressionArgument"],[3,"FunctionCall"],[3,"FunctionCallArgument"],[3,"FunctionDeclaration"],[3,"FunctionDeclarationArgument"],[3,"Path"],[3,"PathSegment"],[3,"Identifier"],[3,"IntegerLiteral"],[3,"Span"]]};
searchIndex["nafi_parser_repl"]={"doc":"","items":[],"paths":[]};
searchIndex["nafi_wasm_api"]={"doc":"","items":[],"paths":[]};
searchIndex["span_derive"]={"doc":"Derive `ast::Spanned` by deferring to an internal `Spanned`.","items":[[24,"Spanned","span_derive","",N,N]],"paths":[]};
initSearch(searchIndex);
