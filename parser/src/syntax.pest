File = { SOI ~ EOI }

TestEntry = _{ SOI ~ Expression ~ EOI }

// ~~ common ~~ //

TypeAscription = { ":" ~ Type }

// ~~ declarations ~~ //

Declaration =
    { FunctionDeclaration
    | LetDeclaration
    }

FunctionDeclaration =
    { "function" ~ Identifier
    ~ "(" ~ FunctionDeclarationArguments ~ ")"
    ~ TypeAscription? ~ "=" ~ FunctionExpression
    }

FunctionDeclarationArguments = { (FunctionDeclarationArgument ~ ("," ~ FunctionDeclarationArgument)* ~ ","?)? }
FunctionDeclarationArgument  = { (Identifier ~ ":")? ~ Type }

LetDeclaration = { "let" ~ Identifier ~ TypeAscription? ~ "=" ~ Expression }

// ~~ statements ~~ //

Statement =
    { Declaration
    | Expression
    }

StatementBlock = { Statement* ~ Expression? }

// ~~ expressions ~~ //

Expression =
    { FunctionCall
    | FunctionExpression
    | Identifier
    | IntegerLiteral
    }

FunctionExpression          = { "{" ~ FunctionExpressionArguments? ~ StatementBlock ~ "}" }
FunctionExpressionArguments = { (FunctionExpressionArgument ~ ("," ~ FunctionExpressionArgument)* ~ ","?)? ~ "->" }
FunctionExpressionArgument  = { Identifier ~ (":" ~ Type)? }

FunctionCall          = { Identifier ~ "(" ~ FunctionCallArguments? ~ ")" ~ FunctionExpression? }
FunctionCallArguments = { FunctionCallArgument ~ ("," ~ FunctionCallArgument)* ~ ","? }
FunctionCallArgument  = { (Identifier ~ "=")? ~ Expression }

// ~~ types ~~ //

Type =
    { Identifier
    }

// ~~ terminals ~~ //

Identifier     = @{ XID_START ~ XID_CONTINUE* }
IntegerLiteral = @{ ASCII_DIGIT+ }

// ~~ trivia ~~ //

WHITESPACE   = _{ WHITE_SPACE+ }
COMMENT      = _{ LineComment | BlockComment }
LineComment  = _{ "//" ~ (!NEWLINE ~ ANY)* }
BlockComment = _{ "/*" ~ (BlockComment | !"*/"~ANY)* ~ "*/" }
